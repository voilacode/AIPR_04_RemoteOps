<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Task Management</title>
    <script defer src="/js/script.js"></script>
    <meta name="csrf-token" content="<%= csrfToken %>">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css">
</head>
<body class="bg-pink-100">
    <nav class="bg-pink-900 p-4 shadow-md">
        <div class="px-10 mx-auto flex justify-between items-center">
          <h1 class="text-white text-2xl font-semibold"><a href="/" class="text-white">RemoteOps</a></h1>
          <div class="flex space-x-4">  
            <a href="/" class="text-white text-sm  bg-pink-600 duration-300 ease-in-out hover:bg-pink-500 px-4 py-2 rounded">Home</a>
            <a href="/aiapp" class="text-white text-sm  bg-pink-600 duration-300 ease-in-out hover:bg-pink-500 px-4 py-2 rounded">AI App</a>
            <a href="/profile" class="text-white text-sm  bg-pink-600 duration-300 ease-in-out hover:bg-pink-500 px-4 py-2 rounded">Profile</a>
            <% if (user && user.role !== 'user') { %>  
              <a href="/admin" class="text-white text-sm  bg-pink-600 duration-300 ease-in-out hover:bg-pink-500 px-4 py-2 rounded">Admin</a>
            <% } %>
            <a href="/logout" class="text-white text-sm  bg-pink-600 duration-300 ease-in-out hover:bg-pink-500 px-4 py-2 rounded">Logout</a>
          </div>
        </div>
      </nav>

      <main class="p-6 px-10 mb-20">
        <div class="flex justify-between items-center">
            <h1 class="text-3xl font-semibold text-center my-8">Task Management Flow</h1>
            <div class="flex space-x-4 items-center">
                <a href="/create" class="p-3 px-6 bg-pink-600 text-white rounded-lg shadow-md hover:bg-pink-500 transition flex space-x-2 text-sm">
                    <svg class="w-4" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <path d="M3 5.25C3 4.00736 4.00736 3 5.25 3H18.75C19.9926 3 21 4.00736 21 5.25V12.0218C19.9897 11.375 18.7886 11 17.5 11C13.9101 11 11 13.9101 11 17.5C11 18.7886 11.375 19.9897 12.0218 21H5.25C4.00736 21 3 19.9926 3 18.75V5.25ZM10.2803 8.78033C10.5732 8.48744 10.5732 8.01256 10.2803 7.71967C9.98744 7.42678 9.51256 7.42678 9.21967 7.71967L7.75 9.18934L7.28033 8.71967C6.98744 8.42678 6.51256 8.42678 6.21967 8.71967C5.92678 9.01256 5.92678 9.48744 6.21967 9.78033L7.21967 10.7803C7.51256 11.0732 7.98744 11.0732 8.28033 10.7803L10.2803 8.78033ZM10.2803 14.2803C10.5732 13.9874 10.5732 13.5126 10.2803 13.2197C9.98744 12.9268 9.51256 12.9268 9.21967 13.2197L7.75 14.6893L7.28033 14.2197C6.98744 13.9268 6.51256 13.9268 6.21967 14.2197C5.92678 14.5126 5.92678 14.9874 6.21967 15.2803L7.21967 16.2803C7.51256 16.5732 7.98744 16.5732 8.28033 16.2803L10.2803 14.2803ZM13.25 8.5C12.8358 8.5 12.5 8.83579 12.5 9.25C12.5 9.66421 12.8358 10 13.25 10H16.75C17.1642 10 17.5 9.66421 17.5 9.25C17.5 8.83579 17.1642 8.5 16.75 8.5H13.25Z" fill="#ffffff"></path> <path d="M23 17.5C23 14.4624 20.5376 12 17.5 12C14.4624 12 12 14.4624 12 17.5C12 20.5376 14.4624 23 17.5 23C20.5376 23 23 20.5376 23 17.5ZM18.0006 18L18.0011 20.5035C18.0011 20.7797 17.7773 21.0035 17.5011 21.0035C17.225 21.0035 17.0011 20.7797 17.0011 20.5035L17.0006 18H14.4961C14.22 18 13.9961 17.7762 13.9961 17.5C13.9961 17.2239 14.22 17 14.4961 17H17.0005L17 14.4993C17 14.2231 17.2239 13.9993 17.5 13.9993C17.7761 13.9993 18 14.2231 18 14.4993L18.0005 17H20.503C20.7792 17 21.003 17.2239 21.003 17.5C21.003 17.7762 20.7792 18 20.503 18H18.0006Z" fill="#ffffff"></path> </g></svg>
                    <span>Assign Task</span>
                    </a>
                <a href="/project" class="p-3 px-6 bg-pink-600 text-white rounded-lg shadow-md hover:bg-pink-500 transition flex space-x-2 text-sm">
                    <svg class="w-4" viewBox="0 0 512 512" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" fill="#000000"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <title>project</title> <g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"> <g id="Combined-Shape" fill="#fff" transform="translate(64.000000, 34.346667)"> <path d="M192,7.10542736e-15 L384,110.851252 L384,332.553755 L192,443.405007 L1.42108547e-14,332.553755 L1.42108547e-14,110.851252 L192,7.10542736e-15 Z M42.666,157.654 L42.6666667,307.920144 L170.666,381.82 L170.666,231.555 L42.666,157.654 Z M341.333,157.655 L213.333,231.555 L213.333,381.82 L341.333333,307.920144 L341.333,157.655 Z M192,49.267223 L66.1333333,121.936377 L192,194.605531 L317.866667,121.936377 L192,49.267223 Z"> </path> </g> </g> </g></svg>
                    <span>Go to Projects</span>
                    </a>
            </div>
            
        </div>
        <% if (user && user.role === 'admin') { %>  
        <p class="text-sm text-gray-500 italic text-center my-4">Drag and Drop the task to progress the pipeline.</p>
        <% } %>

        <!-- Task Board -->
        <div class="grid grid-cols-5 gap-4">
            <% ['New', 'Ongoing', 'Verification', 'Rejected', 'Completed'].forEach(state => { %>
                <div class="w-full bg-white shadow-lg rounded-lg">
                    <h2 class="text-lg font-semibold text-center p-2 border-b-2"><%= state %></h2>
                    <div class="task-container min-h-[200px] p-4 space-y-2" data-status="<%= state %>">
                        <% tasks.filter(task => task.status === state).forEach(task => { %>
                            <div class="task bg-gray-100 p-4 rounded-lg shadow-md hover:bg-gray-200 transition cursor-pointer"
                                <% if (user && user.role === 'admin') { %>
                                    draggable="true"
                                <% } %>
                                data-id="<%= task.id %>"
                                data-status="<%= task.status %>">
                            
                                <div class="flex flex-col">
                                    <span class="font-semibold text-gray-800"><%= task.title %></span>
                                    <p class="text-gray-600 text-sm"><%= task.description %></p>
                                    <p class="text-xs text-gray-500 italic">
                                        Project: <span class="font-medium"><%= task.project_name || "Unassigned" %></span>
                                    </p>
                                    <p class="text-xs text-gray-500 italic">
                                        Assigned to: <span class="font-medium"><%= task.user_name || "Unassigned" %></span>
                                    </p>
                                    <p class="text-xs text-gray-500 italic">
                                        Deadline: <span class="font-medium"><%= task.deadline %></span>
                                    </p>
                                </div>
                                <div class="flex justify-between space-x-2 items-center mt-1">
                                    <div class="flex space-x-2 mt-2">
                                        <% if (user && user.role === 'admin') { %>  
                                            <button class="bg-blue-500 text-white px-3 py-1 rounded-md text-xs hover:bg-blue-700 transition"
                                                onclick="moveToNextStage('<%= task.id %>', '<%= task.status %>')">
                                                Completed
                                            </button>
                                            <button class="bg-red-500 text-white px-3 py-1 rounded-md text-xs hover:bg-red-700 transition"
                                                onclick="revertToPreviousStage('<%= task.id %>', '<%= task.status %>')">
                                                Revert
                                            </button>
                                        <% } %>
                                    </div>
                                    <a href="/edit/<%= task.id %>" class="text-pink-600 hover:text-pink-800 mt-2">
                                        <svg class="w-4" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                            <path fill-rule="evenodd" clip-rule="evenodd" d="m3.99 16.854-1.314 3.504a.75.75 0 0 0 .966.965l3.503-1.314a3 3 0 0 0 1.068-.687L18.36 9.175s-.354-1.061-1.414-2.122c-1.06-1.06-2.122-1.414-2.122-1.414L4.677 15.786a3 3 0 0 0-.687 1.068zm12.249-12.63 1.383-1.383c.248-.248.579-.406.925-.348.487.08 1.232.322 1.934 1.025.703.703.945 1.447 1.025 1.934.058.346-.1.677-.348.925L19.774 7.76s-.353-1.06-1.414-2.12c-1.06-1.062-2.121-1.415-2.121-1.415z" fill="#f000c4"></path>
                                        </svg>
                                    </a>
                                </div>
                            </div>
                        <% }) %>
                    </div>
                </div>
            <% }) %>
        </div>    
      </main>
   
    
    <footer class="bg-pink-900 p-4 shadow-md text-center text-white fixed bottom-0 w-full mt-28 border-t border-pink-400 mt-20">
        &#169; RemoteOps
    </footer>
    
    <script>
         const statusOrder = ["New", "Ongoing", "Verification", "Rejected", "Completed"];
    
    async function moveToNextStage(taskId, currentStatus) {
        const nextStatusIndex = statusOrder.indexOf(currentStatus) + 1;

        if (nextStatusIndex < statusOrder.length) {
            const nextStatus = statusOrder[nextStatusIndex];

            try {
                const response = await fetch("/update-task-status", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                        "X-CSRF-Token": "<%= csrfToken %>"
                    },
                    body: JSON.stringify({ id: taskId, status: nextStatus })
                });

                if (response.ok) {
                    location.reload();
                } else {
                    console.error("Error updating task status.");
                }
            } catch (error) {
                console.error("Error:", error);
            }
        }
    }

    async function revertToPreviousStage(taskId, currentStatus) {
        const prevStatusIndex = statusOrder.indexOf(currentStatus) - 1;

        if (prevStatusIndex >= 0) {
            const prevStatus = statusOrder[prevStatusIndex];

            try {
                const response = await fetch("/update-task-status", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                        "X-CSRF-Token": "<%= csrfToken %>"
                    },
                    body: JSON.stringify({ id: taskId, status: prevStatus })
                });

                if (response.ok) {
                    location.reload();
                } else {
                    console.error("Error reverting task status.");
                }
            } catch (error) {
                console.error("Error:", error);
            }
        }
    }
        document.addEventListener('DOMContentLoaded', function () {
            const tasks = document.querySelectorAll('.task');
            const containers = document.querySelectorAll('.task-container');
    
            tasks.forEach(task => {
                if (task.hasAttribute('draggable')) {
                    task.addEventListener('dragstart', dragStart);
                    task.addEventListener('dragend', dragEnd);
                }
            });
    
            containers.forEach(container => {
                if ( user && user.role === 'admin') { 
                    container.addEventListener('dragover', dragOver);
                    container.addEventListener('drop', drop);
                }
            });
    
            function dragStart(event) {
                event.dataTransfer.setData('text/plain', event.target.dataset.id);
                setTimeout(() => event.target.classList.add('hidden'), 0);
            }
    
            function dragEnd(event) {
                event.target.classList.remove('hidden');
            }
    
            function dragOver(event) {
                event.preventDefault();
            }
    
            function drop(event) {
                event.preventDefault();
                const taskId = event.dataTransfer.getData('text/plain');
                const taskElement = document.querySelector(`[data-id='${taskId}']`);
                if (taskElement) {
                    event.target.appendChild(taskElement);
                }
            }
        })
    </script>

</body>
</html>